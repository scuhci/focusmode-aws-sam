AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  focusmode

  SAM Template for Santa Clara University's HCI Lab's FocusMode project

Parameters:
  OpenAIKey:
    Type: String
    Description: API Key for OpenAI
    Default: abc

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        OpenAIKey: !Ref OpenAIKey
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type'"
      AllowMethods: "'GET'"

Resources:
  FocusModeApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: FocusMode Api Gateway
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type'"
        AllowMethods: "'GET'"

  CategorizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: categorize/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        CategorizeApi:
          Type: Api
          Properties:
            RestApiId: !Ref FocusModeApiGateway
            Path: /categorize
            Method: GET
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref FocusModeUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref FocusModeDataCollectionTable
        - DynamoDBReadPolicy:
            TableName: !Ref FocusModeAdminTable

  FocusModeUserTable:
   Type: AWS::Serverless::SimpleTable
   Properties:
    PrimaryKey:
      Name: UserId
      Type: String
  
  FocusModeDataCollectionTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        -
          AttributeName: "UserId"
          KeyType: "HASH"
        -
          AttributeName: "ValueId"
          KeyType: "RANGE"
      AttributeDefinitions:
        -
          AttributeName: "UserId"
          AttributeType: "S"
        -
          AttributeName: "ValueId"
          AttributeType: "S"
      BillingMode: "PROVISIONED" 
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  FocusModeAdminTable:
    Type: AWS::Serverless::SimpleTable

Outputs:
  FocusModeApiGateway:
    Description: API Gateway endpoint URL for Prod stage for lambda functions
    Value: !Sub "https://${FocusModeApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Staging/categorize/"
  FocusModeApiGatewayRestApiId:
    Description: API Gateway ARN for AWS API Gateway
    Value: !Ref FocusModeApiGateway
    Export:
      Name: FocusModeApiGateway-RestApiId
  FocusModeApiGatewayRootResourceId:
    Value: !GetAtt FocusModeApiGateway.RootResourceId
    Export:
      Name: FocusModeApiGateway-RootResourceId

  # CategorizeApi:
  #   Description: API Gateway endpoint URL for Prod stage for Categorize function
  #   Value: !Sub "https://${FocusModeApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/categorize/"
  # CategorizeFunction:
  #   Description: Categorize Lambda Function ARN
  #   Value: !GetAtt CategorizeFunction.Arn
  # CategorizeFunctionIamRole:
  #   Description: Implicit IAM Role created for Categorize function
  #   Value: !GetAtt CategorizeFunctionRole.Arn
